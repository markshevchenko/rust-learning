{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6","program":"C:\\Users\\mark\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","plugin","C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5b12a5cc5c3469f3","-C","extra-filename=-5b12a5cc5c3469f3","--out-dir","c:\\Projects\\rust-learning\\02\\iron-gcd\\target\\rls\\debug\\deps","-L","dependency=c:\\Projects\\rust-learning\\02\\iron-gcd\\target\\rls\\debug\\deps","--extern","typemap=c:\\Projects\\rust-learning\\02\\iron-gcd\\target\\rls\\debug\\deps\\libtypemap-d76f71f1523b726d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\mark\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Projects\\rust-learning\\02\\iron-gcd\\target\\rls\\debug\\deps\\libplugin-5b12a5cc5c3469f3.rmeta"},"prelude":{"crate_id":{"name":"plugin","disambiguator":[10217402947814099468,10144144705586994097]},"crate_root":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src","external_crates":[{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[45344308337484766,904807583985397655]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[17608585110195136257,12532935013018738971]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10644633998059158352,10345665241509147306]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18212625787733517551,4937265065110821766]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2699922135837212616,11588109643627721037]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16653465091603201180,18239440457404116996]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3073254730555026972,7758270140448631200]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13759999943095835806,4978516890064261122]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4575299228079760236,9361028770882531394]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10307147502021998988,15592389341950453369]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2670035867216739096,10315597156951015330]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7309248630993686720,3186694738066578297]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":13,"id":{"name":"typemap","disambiguator":[18334501274666642661,15391976657243931463]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":14,"id":{"name":"unsafe_any","disambiguator":[8767546448010590873,14606449255618470469]}},{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","num":15,"id":{"name":"traitobject","disambiguator":[5990259674888039180,14366966063900461212]}}],"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":0,"byte_end":6001,"line_start":1,"line_end":187,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":0,"byte_end":6001,"line_start":1,"line_end":187,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":12},{"krate":0,"index":15}],"decl_id":null,"docs":" Lazily-Evaluated, Order-Independent Plugins for Extensible Types.\n","sig":null,"attributes":[{"value":"deny(missing_docs, warnings)","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":0,"byte_end":32,"line_start":1,"line_end":1,"column_start":1,"column_end":33}},{"value":"/ Lazily-Evaluated, Order-Independent Plugins for Extensible Types.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":34,"byte_end":103,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":439,"byte_end":445,"line_start":14,"line_end":14,"column_start":11,"column_end":17},"name":"Plugin","qualname":"::Plugin","value":"Plugin<E: ?Sized>: Key","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11}],"decl_id":null,"docs":" Implementers of this trait can act as plugins for other types, via `OtherType::get<P>()`.","sig":null,"attributes":[{"value":"/ Implementers of this trait can act as plugins for other types, via `OtherType::get<P>()`.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":177,"byte_end":270,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":271,"byte_end":274,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To create a plugin, implement this trait and provide an empty implementation","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":275,"byte_end":355,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ of `Key` to associate the plugin with its return type, `Key::Value`.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":356,"byte_end":428,"line_start":13,"line_end":13,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":525,"byte_end":530,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::Plugin::Error","value":"type Error;","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" The error type associated with this plugin.\n","sig":null,"attributes":[{"value":"/ The error type associated with this plugin.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":468,"byte_end":515,"line_start":15,"line_end":15,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":865,"byte_end":869,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"eval","qualname":"::Plugin::eval","value":"pub fn eval(&mut E) -> Result<Self::Value, Self::Error>","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Create the plugin from an instance of the extended type.","sig":null,"attributes":[{"value":"/ Create the plugin from an instance of the extended type.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":537,"byte_end":597,"line_start":18,"line_end":18,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":602,"byte_end":605,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ While `eval` is given a mutable reference to the extended","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":610,"byte_end":671,"line_start":20,"line_end":20,"column_start":5,"column_end":66}},{"value":"/ type, it is important for implementers to remember that","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":676,"byte_end":735,"line_start":21,"line_end":21,"column_start":5,"column_end":64}},{"value":"/ the result of `eval` is usually cached, so care should","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":740,"byte_end":798,"line_start":22,"line_end":22,"column_start":5,"column_end":63}},{"value":"/ be taken when doing mutation on the extended type.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":803,"byte_end":857,"line_start":23,"line_end":23,"column_start":5,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1040,"byte_end":1050,"line_start":30,"line_end":30,"column_start":11,"column_end":21},"name":"Extensible","qualname":"::Extensible","value":"Extensible","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Defines an interface that extensible types must implement.","sig":null,"attributes":[{"value":"/ Defines an interface that extensible types must implement.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":918,"byte_end":980,"line_start":27,"line_end":27,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":981,"byte_end":984,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Extensible types must contain a TypeMap.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":985,"byte_end":1029,"line_start":29,"line_end":29,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1117,"byte_end":1127,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"extensions","qualname":"::Extensible::extensions","value":"pub fn extensions(&Self) -> &TypeMap","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Get a reference to the type's extension storage.\n","sig":null,"attributes":[{"value":"/ Get a reference to the type's extension storage.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1057,"byte_end":1109,"line_start":31,"line_end":31,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1221,"byte_end":1235,"line_start":35,"line_end":35,"column_start":8,"column_end":22},"name":"extensions_mut","qualname":"::Extensible::extensions_mut","value":"pub fn extensions_mut(&mut Self) -> &mut TypeMap","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Get a mutable reference to the type's extension storage.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the type's extension storage.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1153,"byte_end":1213,"line_start":34,"line_end":34,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1418,"byte_end":1427,"line_start":41,"line_end":41,"column_start":11,"column_end":20},"name":"Pluggable","qualname":"::Pluggable","value":"Pluggable","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":28}],"decl_id":null,"docs":" An interface for plugins that cache values between calls.","sig":null,"attributes":[{"value":"/ An interface for plugins that cache values between calls.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1267,"byte_end":1328,"line_start":38,"line_end":38,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1329,"byte_end":1332,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `R` is the type of the plugin's return value, which must be cloneable.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1333,"byte_end":1407,"line_start":40,"line_end":40,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1659,"byte_end":1662,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"get","qualname":"::Pluggable::get","value":"pub fn get<P: Plugin<Self>>(&mut Self) -> Result<P::Value, P::Error> where\nP::Value: Clone + Any, Self: Extensible","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Return a copy of the plugin's produced value.","sig":null,"attributes":[{"value":"/ Return a copy of the plugin's produced value.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1434,"byte_end":1483,"line_start":42,"line_end":42,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1488,"byte_end":1491,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ The plugin will be created if it doesn't exist already.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1496,"byte_end":1555,"line_start":44,"line_end":44,"column_start":5,"column_end":64}},{"value":"/ If plugin creation fails, an error is returned.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1560,"byte_end":1611,"line_start":45,"line_end":45,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1616,"byte_end":1619,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ `P` is the plugin type.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1624,"byte_end":1651,"line_start":47,"line_end":47,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2060,"byte_end":2067,"line_start":59,"line_end":59,"column_start":8,"column_end":15},"name":"get_ref","qualname":"::Pluggable::get_ref","value":"pub fn get_ref<P: Plugin<Self>>(&mut Self) -> Result<&P::Value, P::Error>\nwhere P::Value: Any, Self: Extensible","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Return a reference to the plugin's produced value.","sig":null,"attributes":[{"value":"/ Return a reference to the plugin's produced value.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1831,"byte_end":1885,"line_start":53,"line_end":53,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1890,"byte_end":1893,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ The plugin will be created if it doesn't exist already.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1898,"byte_end":1957,"line_start":55,"line_end":55,"column_start":5,"column_end":64}},{"value":"/ If plugin creation fails an error is returned.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":1962,"byte_end":2012,"line_start":56,"line_end":56,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2017,"byte_end":2020,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ `P` is the plugin type.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2025,"byte_end":2052,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2469,"byte_end":2476,"line_start":70,"line_end":70,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::Pluggable::get_mut","value":"pub fn get_mut<P: Plugin<Self>>(&mut Self) -> Result<&mut P::Value, P::Error>\nwhere P::Value: Any, Self: Extensible","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Return a mutable reference to the plugin's produced value.","sig":null,"attributes":[{"value":"/ Return a mutable reference to the plugin's produced value.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2233,"byte_end":2295,"line_start":64,"line_end":64,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2300,"byte_end":2303,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The plugin will be created if it doesn't exist already.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2308,"byte_end":2367,"line_start":66,"line_end":66,"column_start":5,"column_end":64}},{"value":"/ If plugin creation fail an error is returned.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2372,"byte_end":2421,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2426,"byte_end":2429,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ `P` is the plugin type.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":2434,"byte_end":2461,"line_start":69,"line_end":69,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":3064,"byte_end":3071,"line_start":87,"line_end":87,"column_start":8,"column_end":15},"name":"compute","qualname":"::Pluggable::compute","value":"pub fn compute<P: Plugin<Self>>(&mut Self) -> Result<P::Value, P::Error>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Create and evaluate a once-off instance of a plugin.\n","sig":null,"attributes":[{"value":"/ Create and evaluate a once-off instance of a plugin.","span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":3000,"byte_end":3056,"line_start":86,"line_end":86,"column_start":5,"column_end":61}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\mark\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\plugin-0.2.6\\src\\lib.rs","byte_start":458,"byte_end":461,"line_start":14,"line_end":14,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":13,"index":41},"to":{"krate":0,"index":8}}]}